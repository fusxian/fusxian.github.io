{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"个人博客开始了","text":"这就算开始正式写博客了，之前陆陆续续在开源中国及头条上写过文章及视频，以后统一在此平台发布，并转发至其他平台。更多信息 ：@程序猿付显","link":"/2020/01/14/first/"},{"title":"Java变量和数据类型","text":"Java基础知识系列课程-Java变量和数据类型 @程序猿付显 一、Java中的变量、常量、注释1：变量变量是什么呢？–不断变化的量，这个概念需要有深刻地体会，只要在程序中遇到有不确定的值或者需要不断改变的值那么这个地方一定需要用到变量。那我们先来看看变量的声明和定义的过程：&nbsp;&nbsp;声明一个变量 12//根据类型开辟空间int a; &nbsp;&nbsp;赋值 12//将数据存入空间a = 10; &nbsp;&nbsp;使用变量 12//取出数据使用变量System.out.println(a); 2：常量常量又是什么呢？–恒定不变的量，那怎么表示呢？&nbsp;&nbsp;字面常量&nbsp;&nbsp;&nbsp;&nbsp;字面常量也被称之为常量值，比如：5 15 -1 false 3.5 ‘w’ “hello”等 &nbsp;&nbsp;定义常量&nbsp;&nbsp;&nbsp;&nbsp;常量不同于常量值，它可以在程序中用符号来代替常量值使用，因此在使用前必须先定义。Java 语言使用 final 关键字来定义一个常量，其语法如下所示：&nbsp;&nbsp;&nbsp;&nbsp;final dataType variableName = value 12345678910public class HelloWorld { // 静态常量 public static final double PI = 3.14; // 声明成员常量 final int y = 10; public static void main(String[] args) { // 声明局部常量 final double x = 3.3; }} 3：注释&nbsp;&nbsp;单行注释&nbsp;&nbsp;&nbsp;&nbsp;单行注释：快捷键Ctrl+/&nbsp;&nbsp;再次按撤销注释&nbsp;&nbsp;&nbsp;&nbsp;一般用来注释局部变量。 123//这是单行注释int a = 5;a = a + 6; &nbsp;&nbsp;多行注释&nbsp;&nbsp;&nbsp;&nbsp;多行注释：Ctrl+Shift+/&nbsp;&nbsp;撤销Ctrl+Shift+\\&nbsp;&nbsp;&nbsp;&nbsp;可用来注释文件头、算法实现、方法中的复杂代码块、修改记录 12345678/*这个是多行注释，此区域全部都不会被编译int a = 5;a = a + 6;*/int j = 0;j++;System.out.println(j); &nbsp;&nbsp;文档注释&nbsp;&nbsp;&nbsp;&nbsp;文档注释：Shift+Alt+J&nbsp;&nbsp;&nbsp;&nbsp;可用来注释类、接口、静态方法、成员方法、静态变量、成员变量、常量&nbsp;&nbsp;&nbsp;&nbsp;或者在定义完：注释类、接口、静态方法、成员方法、静态变量、成员变量、常量后，在上面加上/**在按Enter建也能生成 12345678/** * 这个是文档注释，此处描述此类的作用及其他信息 */public class Hello{ public static void main(String[] args){ System.out.println(\"HelloWord!\"); }} 4：命名规则&nbsp;&nbsp;命名规则参照《阿里Java技术手册》，现已改名为《Java技术手册》阿里Java技术手册 二、输入、输出语句1：输入语句&nbsp;&nbsp;java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入&nbsp;&nbsp;Scanner类的基本语法： 12Scanner scan = new Scanner(System.in);String line = scan.nextLine(); 2：输出语句&nbsp;&nbsp;输出语句是我们刚学习Java程序时写的第一段儿代码 1System.out.println(\"Hello World\"); 三、数据类型1：基本数据类型&nbsp;&nbsp;java中有8种基本数据类型，这8种基本数据类型就要像记自己名字一样记下来 类型 长度 范围 例子 byte 8位 -128~127 (-27 ~ 27-1) byte b = 10; short 16位 -32768~32767(-215 ~ 215-1) short s = 1000; int 32位 -2,147,483,648~2,147,483,647(-231 ~ 231-1) int i = 20201228; long 64位 -9,223,372,036,854,775,808~9,223,372,036,854,775,807(-263 ~ 263-1) long l = 5L; char 16位 \\u0000~\\uFFFF char c = ‘A’; float 32位 3.4E-038~3.4E+038 float f = 3.14F; double 64位 1.7E-308~1.7E+308 double d = 3.1415026; boolean 1位 false、true boolean flag = true; 2：引用数据类型&nbsp;&nbsp;引用数据类型区别于基本数据类型主要在使用过程中，引用数据类型主要有三种 数组 接口 类 &nbsp;&nbsp;其中有我们目前为止常用的几个： 123Scanner scan = new Scanner(System.in);String str = \"abc\";char data[] = {'a','b','c','d'}; 那基本数据类型和引用数据类型之间到底有什么区别呢？这就需要我们对Java中的堆和栈有一个初步的了解 3：内存中的堆和栈&nbsp;&nbsp;基本数据类型在被创建时，在栈上给其划分一块内存，将数值直接存储在栈上&nbsp;&nbsp;引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址对于这样的文字描述我们还是不能够真切的体会，那我们就用一张图简单演示一下从这张简图中我们可以看到，基本数据类型在栈中存储两部分内容，一部分为变量名称，第二部分为此变量所对应的值引用数据类型在栈中也存储两部分内容，一部分为变量名称，第二部分为此变量在堆中的地址，此时在堆中存储的才是此变量所对应的值 4：进制之间的转换&nbsp;&nbsp;进制有二进制、八进制、十进制、十六进制,此处我引入简书上的一篇文章，让大家更清晰的看明白进制间的转换 二进制、八进制、十进制、十六进制之间转换 –MPPC https://www.jianshu.com/p/555cd32e99cc 四、关键字在编译工具中会有红色提示的都属于关键字，也称之为保留字如下：","link":"/2020/01/15/java/Java%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"title":"Java简介","text":"Java基础知识系列课程 @程序猿付显 一、第一个程序演示在我们正式学习JAVA之前,我们先通过这样一个例子来感受一下程序的魅力 代码： 123456789101112public class Demo01 { public static void main(String[] args) throws Exception{ String descrption =\"Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。\" + \"\\r\\nJava可运行于多个平台，如Windows, Mac OS，及其他多种UNIX版本的系统。\" + \"\\r\\n本教程通过简单的实例将让大家更好的了解JAVA编程语言\"; for(int i=0;i&lt;descrption.length();i++){ System.out.print(descrption.charAt(i)); Thread.sleep(80); } }} 如何让这段代码运行呢?那我们来看一下这段代码的运行过程 过程： 使用记事本在D盘中新建一个文件,命名为”Demo01.java” 将此段代码复制到此文件中,并且保存文件 使用快捷键 “win + R” 打开运行窗口,在运行窗口中输入 “cmd” 点击 “确定” 按钮 在弹出的黑色框内输入 “D:” 按下键盘中的 “Enter” 键 紧接着输入 “javac Demo01.java” 之后再次输入 “java Demo01” 现在我们就可以看到这段儿程序的展示效果了 TODO：插入gif图片 二、Java简介看了以上的效果展示,那我们再了解一些关于Java的基础知识 什么是Java?Java 是由 Sun Microsystems 在 1995 年首先发布的编程语言和计算平台。有许多应用程序和 Web 站点只有在安装 Java 后才能正常工作，而且这样的应用程序和 Web 站点日益增多。Java 快速、安全、可靠。从笔记本电脑到数据中心，从游戏控制台到科学超级计算机，从手机到互联网，Java 无处不在！——来自于 java官方解释 那么对于我们开发者来说Java代表着什么? 1：一种面向对象的开发语言Sun 公司对 Java 编程语言的解释是：Java 编程语言是个简单、面向对象、分布式、解释性、健壮、安全与系统无关、可移植、高性能、多线程和动态的语言。 2：可以跨平台运行程序的环境Java 平台是基于 Java 语言的平台，可以运行在任何的操作系统上，这样的平台非常流行。微软公司也推出了与之竞争的.NET平台以及模仿Java的C#语言，但此平台只支持windows系统 三、Java发展历程Java语言并不是一开始就叫 Java 也没有一下这么火，也经历了一个发展过程: 20世纪90年代，硬件领域出现了单片式计算机系统，这种价格低廉的系统一出现就立即引起了自动控制领域人员的注意，因为使用它可以大幅度提升消费类电子产品（如电视机顶盒、面包烤箱、移动电话等）的智能化程度。 Sun公司为了抢占市场先机，在1991年成立了一个称为Green的项目小组，帕特里克、詹姆斯·高斯林、麦克·舍林丹和其他几个工程师一起组成的工作小组在加利福尼亚州门洛帕克市沙丘路的一个小工作室里面研究开发新技术，专攻计算机在家电产品上的嵌入式应用。由于C++所具有的优势，该项目组的研究人员首先考虑采用C++来编写程序。但对于硬件资源极其匮乏的单片式系统来说，C++程序过于复杂和庞大。另外由于消费电子产品所采用的嵌入式处理器芯片的种类繁杂，如何让编写的程序跨平台运行也是个难题。为了解决困难，他们首先着眼于语言的开发，假设了一种结构简单、符合嵌入式应用需要的硬件平台体系结构并为其制定了相应的规范，其中就定义了这种硬件平台的二进制机器码指令系统（即后来成为“字节码”的指令系统），以待语言开发成功后，能有半导体芯片生产商开发和生产这种硬件平台。对于新语言的设计，Sun公司研发人员并没有开发一种全新的语言，而是根据嵌入式软件的要求，对C++进行了改造，去除了留在C++的一些不太实用及影响安全的成分，并结合嵌入式系统的实时性要求，开发了一种称为 Oak 的面向对象语言。 由于在开发Oak语言时，尚且不存在运行字节码的硬件平台，所以为了在开发时可以对这种语言进行实验研究，他们就在已有的硬件和软件平台基础上，按照自己所指定的规范，用软件建设了一个运行平台，整个系统除了比C++更加简单之外，没有什么大的区别。1992年的夏天，当Oak语言开发成功后，研究者们向硬件生产商进行演示了Green操作系统、Oak的程序设计语言、类库和其硬件，以说服他们使用Oak语言生产硬件芯片，但是，硬件生产商并未对此产生极大的热情。因为他们认为，在所有人对Oak语言还一无所知的情况下，就生产硬件产品的风险实在太大了，所以Oak语言也就因为缺乏硬件的支持而无法进入市场，从而被搁置了下来。1994年6、7月间，在经历了一场历时三天的讨论之后，团队决定再一次改变了努力的目标，这次他们决定将该技术应用于万维网。他们认为随着Mosaic浏览器的到来，因特网正在向同样的高度互动的远景演变，而这一远景正是他们在有线电视网中看到的。作为原型，帕特里克·诺顿写了一个小型万维网浏览器WebRunner。1995年，互联网的蓬勃发展给了Oak机会。业界为了使死板、单调的静态网页能够“灵活”起来，急需一种软件技术来开发一种程序，这种程序可以通过网络传播并且能够跨平台运行。于是，世界各大IT企业为此纷纷投入了大量的人力、物力和财力。这个时候，Sun公司想起了那个被搁置起来很久的Oak，并且重新审视了那个用软件编写的试验平台，由于它是按照嵌入式系统硬件平台体系结构进行编写的，所以非常小，特别适用于网络上的传输系统，而Oak也是一种精简的语言，程序非常小，适合在网络上传输。Sun公司首先推出了可以嵌入网页并且可以随同网页在网络上传输的Applet（Applet是一种将小程序嵌入到网页中进行执行的技术），并将Oak更名为Java（在申请注册商标时，发现Oak已经被人使用了，再想了一系列名字之后，最终，使用了提议者在喝一杯Java咖啡时无意提到的Java词语）。5月23日，Sun公司在Sun world会议上正式发布Java和HotJava浏览器。IBM、Apple、DEC、Adobe、HP、Oracle、Netscape和微软等各大公司都纷纷停止了自己的相关开发项目，竞相购买了Java使用许可证，并为自己的产品开发了相应的Java平台。 1995年5月23日，Java语言诞生1996年1月，第一个JDK-JDK1.0诞生1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入JAVA技术1996年9月，约8.3万个网页应用了JAVA技术来制作1997年2月18日，JDK1.1发布1997年4月2日，JavaOne会议召开，参与者逾一万人，创当时全球同类会议规模之纪录1997年9月，JavaDeveloperConnection社区成员超过十万1998年2月，JDK1.1被下载超过2,000,000次1998年12月8日，JAVA2企业平台J2EE发布1999年6月，SUN公司发布Java的三个版本：标准版（JavaSE,以前是J2SE）、企业版（JavaEE以前是J2EE）和微型版（JavaME，以前是J2ME）2000年5月8日，JDK1.3发布2000年5月29日，JDK1.4发布2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机2001年9月24日，J2EE1.3发布2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升2004年9月30日18:00PM，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.02005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名，以取消其中的数字”2”：J2EE更名为Java EE，J2SE更名为Java SE，J2ME更名为Java ME2006年12月，SUN公司发布JRE6.02009年04月20日，甲骨文74亿美元收购Sun。取得java的版权。2010年11月，由于甲骨文对于Java社区的不友善，因此Apache扬言将退出JCP[4]。2011年7月28日，甲骨文发布java7.0的正式版。2014年3月18日，Oracle公司发表Java SE 8。‘ 四、为什么要学Java？因为学校规定必须学，不学就没有学分，没有学分就没有毕业证！其实我们干好多事都是这样的原因，回想一下你为什么要学生物 化学 地理 政治？？当然了这不是根本原因，根本原因还在于这些内容是可以帮我们完成平常工作、生活中 遇到的问题。那么我们为什么要学习Java呢？大体有以下几种：1：自己的兴趣爱好，就喜欢编程，就喜欢Java2：被逼的不学不行，不学不给毕业证3：学习Java可以找到一份很不错的工作，来满足自己日益不断变大的物质、精神需求 五、怎么才能学好Java？不管你是什么原因来学习Java，既然已经到了这个地步了，那我们就来说一说怎么才能学好Java。最简单的办法通常也是最笨的办法： 多看 多写 多练 多思考 多总结 …等总之一个字 多 就对了！！！ 那总得有个步骤吧？ 第一阶段：熟悉各种概念，这个阶段也是最容易放弃的阶段，因为一上来全都是各种从来没见过的陌生名词及专业解释，怎么办？这时候需要拿出来我们小学认汉字、认数字的状态，“ 1 ”这个就是一，“ 兔 ”这个就是小兔子的兔，每天重复之前的内容，当你看到它的时候你能张口说出他就是 小兔子的兔，那么ok 这个概念你就学会了; 第二阶段:多练基础代码,需要把课堂的例子,书本上的例子,你能找到的所有的例子,多动手敲一敲,记住一些编程的套路; 第三阶段多思考:动手敲完以上代码,需要思考一下程序的思路,按照自己的思路再次进行编码,然后对照第二阶段敲的代码,看看哪些地方有问题,是什么样的问题,记录一下,避免下一次再次出现; 第四阶段多总结:需要把你平时敲代码遇到的问题以及解决方案进行总结,总结是对你之前学习内容的肯定也是对以后学习的好的开端; 第五阶段这个阶段最简单了 - - - - 遇到新的概念、知识点重复前四个阶段就ok了. 六、学好Java有啥用？做好社会主义接班人?是的,学习好Java确实可以做好社会主义接班人,但是国外的人学Java有啥用?目前我们使用的电子设备中比如 手机 电视 手表 等智能设备中一大部分都是Android的操作系统,那在这样的系统中开发应用是使用的主要语言就是Java;除了我们能看到的设备,我们平时过得两个购物节 淘宝的双十一 双十二,这样的大规模的网站它的主要系统也是使用Java来进行编写的.那跟我们又有什么关系呢?学好Java可以使我们找到一份薪水不错的工作!就这么简单! 七、开始Java语言的详细内容1：Java在开发上的分类JavaSE Java 平台标准版这一部分是Java语言的核心内容，其中包括数据库连接、接口、数据结构、输入输入、网络编程、文件读取、多线程等等内容； JavaEE Java平台企业版这一部分是在JavaSE的基础上做的扩展，以适应企业级的开发，增加了 EJB、Servlet、JSP、XML、事物控制等，这一部分才是我们学习Java以及以后工作中应用的重点内容； JavaME Java平台微型版这一部分在以前的智能机（塞班）系统，诺基亚手机中应用最广。 JavaEE和JavaME都是在JavaSE的基础上做的扩展，也就是说JavaSE是我们学习Java的核心课程，之后我们会进行JavaEE企业级开发的学习。 2：Java的特性Java语言是简单的：Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。 Java语言是面向对象的：Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。 Java语言是分布式的：Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。 Java语言是健壮的：Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。 Java语言是安全的：Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。 Java语言是体系结构中立的：Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。 Java语言是可移植的：这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。 Java语言是解释型的：如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。 Java是高性能的：与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。 Java语言是多线程的：在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable)的构造子将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。 Java语言是动态的：Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。 3：Java语言的运行机制Java语言是一种解释型的语言，Java代码在计算机中的运行过程是这样的：所有的Java代码都被保存在一个xxx.java的文件中，经过编译器的编译生成一个xxx.class的字节码文件，之后这个字节码文件通过Java虚拟机解释成计算机能识别的机器代码，完成相应的功能操作。 那么这里边有一个关键点：Java虚拟机 它的主要工作就是负责将字节码文件解释成机器能够识别的机器代码，它是由软件和硬件模拟出来的可以干活的机器所以就叫Java 虚拟机（Java Virtual Machine JVM） Java虚拟机的功能类似一个翻译，将机器不能识别的字节码文件解释成机器代码","link":"/2020/01/14/java/Java%E7%AE%80%E4%BB%8B/"}],"tags":[],"categories":[{"name":"开篇","slug":"开篇","link":"/categories/%E5%BC%80%E7%AF%87/"},{"name":"Java","slug":"Java","link":"/categories/Java/"}]}