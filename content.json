{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"个人博客开始了","text":"这就算开始正式写博客了，之前陆陆续续在开源中国及头条上写过文章及视频，以后统一在此平台发布，并转发至其他平台。更多信息 ：@程序猿付显","link":"/2020/01/14/first/"},{"title":"Java中的分支结构","text":"Java基础知识系列课程-Java中的分支结构 @程序猿付显 一、if分支结构1:单if分支结构 1234int a =6;if(a&gt;10){ Syste.out.println(\"a 大于 10\");} 2:if-else分支结构 123456int a =6;if(a&gt;10){ Syste.out.println(\"a 大于 10\");}else{ Syste.out.println(\"a 不大于 10\");} 3:多重if-else分支结构 12345678int a =6;if(a&gt;10){ Syste.out.println(\"a 大于 10\");}else if(a == 10){ Syste.out.println(\"a 等于 10\");}else{ Syste.out.println(\"a 小于 10\");} 二、switch分支结构令狐冲参加比武大会 如果获得第一名，将出任武林盟主 如果获得第二名，将出任武当掌门 如果获得第三名，将出任峨嵋掌门 否则，将被逐出师门使用switch代码实现如下:1 int mingCi = 1; switch (mingCi){ case 1: System.out.println(\"出任武林盟主\"); break; case 2: System.out.println(\"出任武当掌门\"); break; case 3: System.out.println(\"出任峨嵋掌门\"); break; default: System.out.println(\"被逐出师门\"); } 三、两个关键字的使用[break continue]break 跳出当前循环或者代码段continue 跳过本次循环,继续下次循环还是上代码看吧 12345678910111213141516171819//使用break --&gt; 1-10中只要遇到有偶数就停止int i = 1;for(;i&lt;11;i++){ if(i%2==0){ break; }}System.out.println(i+\"是偶数!\");//使用continue --&gt; 查找1-10之间所有的偶数和int i = 1;int total = 0;for(;i&lt;11;i++){ if(i%2!=0){ continue; } total+=i;}System.out.println(\"所有的偶数和为:\"+total);","link":"/2020/01/31/java/Java%E4%B8%AD%E7%9A%84%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"},{"title":"Java中的循环结构","text":"Java基础知识系列课程-Java中的循环结构 @程序猿付显 一、while循环&nbsp;&nbsp;while 循环只最基本也是最简单的一种循环结构:语法: 123while(布尔型表达式){ //循环体 } 此处的布尔表达式可以理解为:一个只要结果为布尔值的任何内容 12345int i = 5;while(i&lt;4){ //循环体 System.out.println(\"这句话不会执行的\");} 二、do…while循环&nbsp;&nbsp;对于 while 语句而言,如果不满足条件,则不能进入循环。但有时候我们需要即使不满足条件,也至少执行一次。do…while 循环和 while 循环相似,不同的是 do…while 循环至少会执行一次语法： 123do{ //循环体}while(布尔表达式); &nbsp;&nbsp;do…while 循环先进行一次循环体的执行,然后才会进行布尔表达式的判断,如果结果为 true 则继续下一次循环,如果为false则直接退出循环 123456789101112int i = 5;//while 循环while(i&lt;4){ //循环体 System.out.println(\"这句话不会执行的\");}//do while循环do{ //循环体 System.out.println(\"不管下边条件真不真,我肯定会执行一次的!\");}while(i&lt;4); 三、for循环&nbsp;&nbsp;for 循环是使用率最高的一种循环,语法相对 while 循环稍微复杂一点 123for(初始化循环参数;循环条件;更新循环变量){ //循环体} 1.初始化循环参数 这是第一步参数: int i = 0; 2.循环条件 初始化参数之后需要判断此条件是否为 true ,如果为 true则执行下一步,如果为 false 则退出循环 3.循环体 这是循环体 执行完执行下一步 4.更新循环变量 待循环体执行完毕,要对循环变量进行更新,一般为自增或者自减:i++ or i–,之后进入第二步进行条件判断 123for(int i = 0;i&lt;10;i++){ System.out.println(\"我要被输出10遍\");} 四、foreach循环&nbsp;&nbsp;这个循环是for循环的一种升级用法,一般针对数组和集合使用,简化普通for循环 1234String[] str = {\"你\",\"好\",\"啊\",\"!\"};for(String s : str){ System.out.println(s);} 其中 s 代表数组 str 中的每一个被循环到的内容,这种写法比之前的for更加的简介,但是没有那容易理解,需要加练习才能加深印象 五、两个关键字的使用[break continue]break 跳出当前循环或者代码段continue 跳过本次循环,继续下次循环还是上代码看吧 12345678910111213141516171819//使用break --&gt; 1-10中只要遇到有偶数就停止int i = 1;for(;i&lt;11;i++){ if(i%2==0){ break; }}System.out.println(i+\"是偶数!\");//使用continue --&gt; 查找1-10之间所有的偶数和int i = 1;int total = 0;for(;i&lt;11;i++){ if(i%2!=0){ continue; } total+=i;}System.out.println(\"所有的偶数和为:\"+total);","link":"/2020/02/01/java/Java%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"},{"title":"Java中的运算符和表达式","text":"Java基础知识系列课程-Java中的运算符和表达式 @程序猿付显 一、算术运算符&nbsp;&nbsp;算术运算符是我们比较常见的一类运算符，其中包括： + - x / % ++ 自增 – 自减 其中四个运算符是需要我们特别注意的 /&nbsp;&nbsp;除法运算符:此运算符我们需要考虑数据类型的问题eg: 15 / 2 = ? ; 在我们以前的数学运算中它的结果是：2.5&nbsp;&nbsp;而在我们Java中要考虑除数和被除数的数据类型的问题，5、2默认都是整型的，所以结果也必须是整型的，可是结果计算出来是2.5，那程序就在这个结果中取整数部分所以最终的结果为2 %&nbsp;&nbsp;取余也叫取模运算符，我觉得叫取余数更好理解，顾名思义就是两个数做除法，求最终剩下几，那这个剩余没法运算的就是我们要的值eg:15 % 2 = ?; 5对2求余，商2 余1所以最后的结果就是1 ++ 自增运算符，从名字我们就可以看出来–自己玩eg:123i++;//此句话我们对它进行一下翻译i = i + 1; 在原有的基础上做+1的操作，在使用++符号一定注意一个问题 i++ 和 ++i 的区别，i++先使用i完成其他运算再自增，++i先自增再参加其他运算 – 自减运算符，同上eg:123i--;//此句话我们对它进行一下翻译i = i - 1; 在原有的基础上做-1的操作，其他使用同上 其他的几个都是普通的数学运算符，使用上没有太大区别二、赋值运算符 = += -= *= /= %= &nbsp;&nbsp;赋值运算符中最熟悉也是最不熟悉的就是=，大部分人认为这不就是等号吗？其实它在java中我们称之为赋值符号 12345678//1. 赋值符号 =i = i + 1;//2. += 这是一个缩写的形式i+=1;//等同于i = i + 1; //其他类似,此处省略 三、关系运算符 &gt; &lt; &gt;= &lt;= == != &nbsp;&nbsp;判断两个操作之间的关系,结果是一个boolean的结果(只会是ture or false)这里边我们看一个之前不太常见的==,这个才是我们之前一直脑子里的等号 1234567891011int a = 5;int b = 6;if(a &gt; b){ System.out.println(\"a 比 b大\");}if(a == b){ System.out.println(\"a 和 b一样大\");}if(a != b){ System.out.println(\"a 和 b不一样大\");} 四、逻辑运算符&nbsp;&nbsp;对两个布尔类型的操作数进行操作,其结果也是boolean ! 取反 &amp;&amp; 短路与 || 短路或 &amp; 逻辑与 | 逻辑或 运算符 用法 含义 说明 实例 结果 &amp;&amp; a&amp;&amp;b 短路与 ab 全为 true 时，计算结果为 true，否则为 false。 2&gt;1&amp;&amp;3&lt;4 true || ab 短路或 ab 全为 false 时，计算结果为 false，否则为 true。 2&lt;1||3&gt;4 false ! !a 逻辑非 a 为 true 时，值为 false，a 为 false 时，值为 true !(2&gt;4) true | ab 逻辑或 ab 全为 false 时，计算结果为 false，否则为 true 1&gt;2|3&gt;5 false &amp; a&amp;b 逻辑与 ab 全为 false 时，计算结果为 false，否则为 true 1&lt;2&amp;3&lt;5 true &amp;&amp; 与 &amp; 区别：如果 a 为 false，则不计算 b（因为不论 b 为何值，结果都为 false） || 与 | 区别：如果 a 为 true，则不计算 b（因为不论 b 为何值，结果都为 true） 五、条件运算符&nbsp;&nbsp;条件运算符也称之为三目运算符,也是以后我们会常用的一种运算符 Test？语句块1：语句块2； Test是boolean结果的表达式 结果为true时执行语句块1 结果为false时执行语句块2 1234567//需求：比较a b两个数的大小,将大的数存入c中int a = 5;int b = 6;int c = 0;c = a&gt;b?a:b;//此时c中存储的就是最大的值也就是6System.out.println(c);","link":"/2020/01/31/java/Java%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"title":"Java简介","text":"Java基础知识系列课程 @程序猿付显 一、第一个程序演示在我们正式学习JAVA之前,我们先通过这样一个例子来感受一下程序的魅力 代码： 123456789101112public class Demo01 { public static void main(String[] args) throws Exception{ String descrption =\"Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。\" + \"\\r\\nJava可运行于多个平台，如Windows, Mac OS，及其他多种UNIX版本的系统。\" + \"\\r\\n本教程通过简单的实例将让大家更好的了解JAVA编程语言\"; for(int i=0;i&lt;descrption.length();i++){ System.out.print(descrption.charAt(i)); Thread.sleep(80); } }} 如何让这段代码运行呢?那我们来看一下这段代码的运行过程 过程： 使用记事本在D盘中新建一个文件,命名为”Demo01.java” 将此段代码复制到此文件中,并且保存文件 使用快捷键 “win + R” 打开运行窗口,在运行窗口中输入 “cmd” 点击 “确定” 按钮 在弹出的黑色框内输入 “D:” 按下键盘中的 “Enter” 键 紧接着输入 “javac Demo01.java” 之后再次输入 “java Demo01” 现在我们就可以看到这段儿程序的展示效果了 TODO：插入gif图片 二、Java简介看了以上的效果展示,那我们再了解一些关于Java的基础知识 什么是Java?Java 是由 Sun Microsystems 在 1995 年首先发布的编程语言和计算平台。有许多应用程序和 Web 站点只有在安装 Java 后才能正常工作，而且这样的应用程序和 Web 站点日益增多。Java 快速、安全、可靠。从笔记本电脑到数据中心，从游戏控制台到科学超级计算机，从手机到互联网，Java 无处不在！——来自于 java官方解释 那么对于我们开发者来说Java代表着什么? 1：一种面向对象的开发语言Sun 公司对 Java 编程语言的解释是：Java 编程语言是个简单、面向对象、分布式、解释性、健壮、安全与系统无关、可移植、高性能、多线程和动态的语言。 2：可以跨平台运行程序的环境Java 平台是基于 Java 语言的平台，可以运行在任何的操作系统上，这样的平台非常流行。微软公司也推出了与之竞争的.NET平台以及模仿Java的C#语言，但此平台只支持windows系统 三、Java发展历程Java语言并不是一开始就叫 Java 也没有一下这么火，也经历了一个发展过程: 20世纪90年代，硬件领域出现了单片式计算机系统，这种价格低廉的系统一出现就立即引起了自动控制领域人员的注意，因为使用它可以大幅度提升消费类电子产品（如电视机顶盒、面包烤箱、移动电话等）的智能化程度。 Sun公司为了抢占市场先机，在1991年成立了一个称为Green的项目小组，帕特里克、詹姆斯·高斯林、麦克·舍林丹和其他几个工程师一起组成的工作小组在加利福尼亚州门洛帕克市沙丘路的一个小工作室里面研究开发新技术，专攻计算机在家电产品上的嵌入式应用。由于C++所具有的优势，该项目组的研究人员首先考虑采用C++来编写程序。但对于硬件资源极其匮乏的单片式系统来说，C++程序过于复杂和庞大。另外由于消费电子产品所采用的嵌入式处理器芯片的种类繁杂，如何让编写的程序跨平台运行也是个难题。为了解决困难，他们首先着眼于语言的开发，假设了一种结构简单、符合嵌入式应用需要的硬件平台体系结构并为其制定了相应的规范，其中就定义了这种硬件平台的二进制机器码指令系统（即后来成为“字节码”的指令系统），以待语言开发成功后，能有半导体芯片生产商开发和生产这种硬件平台。对于新语言的设计，Sun公司研发人员并没有开发一种全新的语言，而是根据嵌入式软件的要求，对C++进行了改造，去除了留在C++的一些不太实用及影响安全的成分，并结合嵌入式系统的实时性要求，开发了一种称为 Oak 的面向对象语言。 由于在开发Oak语言时，尚且不存在运行字节码的硬件平台，所以为了在开发时可以对这种语言进行实验研究，他们就在已有的硬件和软件平台基础上，按照自己所指定的规范，用软件建设了一个运行平台，整个系统除了比C++更加简单之外，没有什么大的区别。1992年的夏天，当Oak语言开发成功后，研究者们向硬件生产商进行演示了Green操作系统、Oak的程序设计语言、类库和其硬件，以说服他们使用Oak语言生产硬件芯片，但是，硬件生产商并未对此产生极大的热情。因为他们认为，在所有人对Oak语言还一无所知的情况下，就生产硬件产品的风险实在太大了，所以Oak语言也就因为缺乏硬件的支持而无法进入市场，从而被搁置了下来。1994年6、7月间，在经历了一场历时三天的讨论之后，团队决定再一次改变了努力的目标，这次他们决定将该技术应用于万维网。他们认为随着Mosaic浏览器的到来，因特网正在向同样的高度互动的远景演变，而这一远景正是他们在有线电视网中看到的。作为原型，帕特里克·诺顿写了一个小型万维网浏览器WebRunner。1995年，互联网的蓬勃发展给了Oak机会。业界为了使死板、单调的静态网页能够“灵活”起来，急需一种软件技术来开发一种程序，这种程序可以通过网络传播并且能够跨平台运行。于是，世界各大IT企业为此纷纷投入了大量的人力、物力和财力。这个时候，Sun公司想起了那个被搁置起来很久的Oak，并且重新审视了那个用软件编写的试验平台，由于它是按照嵌入式系统硬件平台体系结构进行编写的，所以非常小，特别适用于网络上的传输系统，而Oak也是一种精简的语言，程序非常小，适合在网络上传输。Sun公司首先推出了可以嵌入网页并且可以随同网页在网络上传输的Applet（Applet是一种将小程序嵌入到网页中进行执行的技术），并将Oak更名为Java（在申请注册商标时，发现Oak已经被人使用了，再想了一系列名字之后，最终，使用了提议者在喝一杯Java咖啡时无意提到的Java词语）。5月23日，Sun公司在Sun world会议上正式发布Java和HotJava浏览器。IBM、Apple、DEC、Adobe、HP、Oracle、Netscape和微软等各大公司都纷纷停止了自己的相关开发项目，竞相购买了Java使用许可证，并为自己的产品开发了相应的Java平台。 1995年5月23日，Java语言诞生1996年1月，第一个JDK-JDK1.0诞生1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入JAVA技术1996年9月，约8.3万个网页应用了JAVA技术来制作1997年2月18日，JDK1.1发布1997年4月2日，JavaOne会议召开，参与者逾一万人，创当时全球同类会议规模之纪录1997年9月，JavaDeveloperConnection社区成员超过十万1998年2月，JDK1.1被下载超过2,000,000次1998年12月8日，JAVA2企业平台J2EE发布1999年6月，SUN公司发布Java的三个版本：标准版（JavaSE,以前是J2SE）、企业版（JavaEE以前是J2EE）和微型版（JavaME，以前是J2ME）2000年5月8日，JDK1.3发布2000年5月29日，JDK1.4发布2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机2001年9月24日，J2EE1.3发布2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升2004年9月30日18:00PM，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.02005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名，以取消其中的数字”2”：J2EE更名为Java EE，J2SE更名为Java SE，J2ME更名为Java ME2006年12月，SUN公司发布JRE6.02009年04月20日，甲骨文74亿美元收购Sun。取得java的版权。2010年11月，由于甲骨文对于Java社区的不友善，因此Apache扬言将退出JCP[4]。2011年7月28日，甲骨文发布java7.0的正式版。2014年3月18日，Oracle公司发表Java SE 8。‘ 四、为什么要学Java？因为学校规定必须学，不学就没有学分，没有学分就没有毕业证！其实我们干好多事都是这样的原因，回想一下你为什么要学生物 化学 地理 政治？？当然了这不是根本原因，根本原因还在于这些内容是可以帮我们完成平常工作、生活中 遇到的问题。那么我们为什么要学习Java呢？大体有以下几种：1：自己的兴趣爱好，就喜欢编程，就喜欢Java2：被逼的不学不行，不学不给毕业证3：学习Java可以找到一份很不错的工作，来满足自己日益不断变大的物质、精神需求 五、怎么才能学好Java？不管你是什么原因来学习Java，既然已经到了这个地步了，那我们就来说一说怎么才能学好Java。最简单的办法通常也是最笨的办法： 多看 多写 多练 多思考 多总结 …等总之一个字 多 就对了！！！ 那总得有个步骤吧？ 第一阶段：熟悉各种概念，这个阶段也是最容易放弃的阶段，因为一上来全都是各种从来没见过的陌生名词及专业解释，怎么办？这时候需要拿出来我们小学认汉字、认数字的状态，“ 1 ”这个就是一，“ 兔 ”这个就是小兔子的兔，每天重复之前的内容，当你看到它的时候你能张口说出他就是 小兔子的兔，那么ok 这个概念你就学会了; 第二阶段:多练基础代码,需要把课堂的例子,书本上的例子,你能找到的所有的例子,多动手敲一敲,记住一些编程的套路; 第三阶段多思考:动手敲完以上代码,需要思考一下程序的思路,按照自己的思路再次进行编码,然后对照第二阶段敲的代码,看看哪些地方有问题,是什么样的问题,记录一下,避免下一次再次出现; 第四阶段多总结:需要把你平时敲代码遇到的问题以及解决方案进行总结,总结是对你之前学习内容的肯定也是对以后学习的好的开端; 第五阶段这个阶段最简单了 - - - - 遇到新的概念、知识点重复前四个阶段就ok了. 六、学好Java有啥用？做好社会主义接班人?是的,学习好Java确实可以做好社会主义接班人,但是国外的人学Java有啥用?目前我们使用的电子设备中比如 手机 电视 手表 等智能设备中一大部分都是Android的操作系统,那在这样的系统中开发应用是使用的主要语言就是Java;除了我们能看到的设备,我们平时过得两个购物节 淘宝的双十一 双十二,这样的大规模的网站它的主要系统也是使用Java来进行编写的.那跟我们又有什么关系呢?学好Java可以使我们找到一份薪水不错的工作!就这么简单! 七、开始Java语言的详细内容1：Java在开发上的分类JavaSE Java 平台标准版这一部分是Java语言的核心内容，其中包括数据库连接、接口、数据结构、输入输入、网络编程、文件读取、多线程等等内容； JavaEE Java平台企业版这一部分是在JavaSE的基础上做的扩展，以适应企业级的开发，增加了 EJB、Servlet、JSP、XML、事物控制等，这一部分才是我们学习Java以及以后工作中应用的重点内容； JavaME Java平台微型版这一部分在以前的智能机（塞班）系统，诺基亚手机中应用最广。 JavaEE和JavaME都是在JavaSE的基础上做的扩展，也就是说JavaSE是我们学习Java的核心课程，之后我们会进行JavaEE企业级开发的学习。 2：Java的特性Java语言是简单的：Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。 Java语言是面向对象的：Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。 Java语言是分布式的：Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。 Java语言是健壮的：Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。 Java语言是安全的：Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。 Java语言是体系结构中立的：Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。 Java语言是可移植的：这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。 Java语言是解释型的：如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。 Java是高性能的：与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。 Java语言是多线程的：在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable)的构造子将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。 Java语言是动态的：Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。 3：Java语言的运行机制Java语言是一种解释型的语言，Java代码在计算机中的运行过程是这样的：所有的Java代码都被保存在一个xxx.java的文件中，经过编译器的编译生成一个xxx.class的字节码文件，之后这个字节码文件通过Java虚拟机解释成计算机能识别的机器代码，完成相应的功能操作。 那么这里边有一个关键点：Java虚拟机 它的主要工作就是负责将字节码文件解释成机器能够识别的机器代码，它是由软件和硬件模拟出来的可以干活的机器所以就叫Java 虚拟机（Java Virtual Machine JVM） Java虚拟机的功能类似一个翻译，将机器不能识别的字节码文件解释成机器代码","link":"/2020/01/14/java/Java%E7%AE%80%E4%BB%8B/"},{"title":"Java变量和数据类型","text":"Java基础知识系列课程-Java变量和数据类型 @程序猿付显 一、Java中的变量、常量、注释1：变量变量是什么呢？–不断变化的量，这个概念需要有深刻地体会，只要在程序中遇到有不确定的值或者需要不断改变的值那么这个地方一定需要用到变量。那我们先来看看变量的声明和定义的过程：&nbsp;&nbsp;声明一个变量 12//根据类型开辟空间int a; &nbsp;&nbsp;赋值 12//将数据存入空间a = 10; &nbsp;&nbsp;使用变量 12//取出数据使用变量System.out.println(a); 2：常量常量又是什么呢？–恒定不变的量，那怎么表示呢？&nbsp;&nbsp;字面常量&nbsp;&nbsp;&nbsp;&nbsp;字面常量也被称之为常量值，比如：5 15 -1 false 3.5 ‘w’ “hello”等 &nbsp;&nbsp;定义常量&nbsp;&nbsp;&nbsp;&nbsp;常量不同于常量值，它可以在程序中用符号来代替常量值使用，因此在使用前必须先定义。Java 语言使用 final 关键字来定义一个常量，其语法如下所示：&nbsp;&nbsp;&nbsp;&nbsp;final dataType variableName = value 12345678910public class HelloWorld { // 静态常量 public static final double PI = 3.14; // 声明成员常量 final int y = 10; public static void main(String[] args) { // 声明局部常量 final double x = 3.3; }} 3：注释&nbsp;&nbsp;单行注释&nbsp;&nbsp;&nbsp;&nbsp;单行注释：快捷键Ctrl+/&nbsp;&nbsp;再次按撤销注释&nbsp;&nbsp;&nbsp;&nbsp;一般用来注释局部变量。 123//这是单行注释int a = 5;a = a + 6; &nbsp;&nbsp;多行注释&nbsp;&nbsp;&nbsp;&nbsp;多行注释：Ctrl+Shift+/&nbsp;&nbsp;撤销Ctrl+Shift+\\&nbsp;&nbsp;&nbsp;&nbsp;可用来注释文件头、算法实现、方法中的复杂代码块、修改记录 12345678/*这个是多行注释，此区域全部都不会被编译int a = 5;a = a + 6;*/int j = 0;j++;System.out.println(j); &nbsp;&nbsp;文档注释&nbsp;&nbsp;&nbsp;&nbsp;文档注释：Shift+Alt+J&nbsp;&nbsp;&nbsp;&nbsp;可用来注释类、接口、静态方法、成员方法、静态变量、成员变量、常量&nbsp;&nbsp;&nbsp;&nbsp;或者在定义完：注释类、接口、静态方法、成员方法、静态变量、成员变量、常量后，在上面加上/**在按Enter建也能生成 12345678/** * 这个是文档注释，此处描述此类的作用及其他信息 */public class Hello{ public static void main(String[] args){ System.out.println(\"HelloWord!\"); }} 4：命名规则&nbsp;&nbsp;命名规则参照《阿里Java技术手册》，现已改名为《Java技术手册》阿里Java技术手册 二、输入、输出语句1：输入语句&nbsp;&nbsp;java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入&nbsp;&nbsp;Scanner类的基本语法： 12Scanner scan = new Scanner(System.in);String line = scan.nextLine(); 2：输出语句&nbsp;&nbsp;输出语句是我们刚学习Java程序时写的第一段儿代码 1System.out.println(\"Hello World\"); 三、数据类型1：基本数据类型&nbsp;&nbsp;java中有8种基本数据类型，这8种基本数据类型就要像记自己名字一样记下来 类型 长度 范围 例子 byte 8位 -128~127 (-27 ~ 27-1) byte b = 10; short 16位 -32768~32767(-215 ~ 215-1) short s = 1000; int 32位 -2,147,483,648~2,147,483,647(-231 ~ 231-1) int i = 20201228; long 64位 -9,223,372,036,854,775,808~9,223,372,036,854,775,807(-263 ~ 263-1) long l = 5L; char 16位 \\u0000~\\uFFFF char c = ‘A’; float 32位 3.4E-038~3.4E+038 float f = 3.14F; double 64位 1.7E-308~1.7E+308 double d = 3.1415026; boolean 1位 false、true boolean flag = true; 2：引用数据类型&nbsp;&nbsp;引用数据类型区别于基本数据类型主要在使用过程中，引用数据类型主要有三种 数组 接口 类 &nbsp;&nbsp;其中有我们目前为止常用的几个： 123Scanner scan = new Scanner(System.in);String str = \"abc\";char data[] = {'a','b','c','d'}; 那基本数据类型和引用数据类型之间到底有什么区别呢？这就需要我们对Java中的堆和栈有一个初步的了解 3：内存中的堆和栈&nbsp;&nbsp;基本数据类型在被创建时，在栈上给其划分一块内存，将数值直接存储在栈上&nbsp;&nbsp;引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址对于这样的文字描述我们还是不能够真切的体会，那我们就用一张图简单演示一下从这张简图中我们可以看到，基本数据类型在栈中存储两部分内容，一部分为变量名称，第二部分为此变量所对应的值引用数据类型在栈中也存储两部分内容，一部分为变量名称，第二部分为此变量在堆中的地址，此时在堆中存储的才是此变量所对应的值 4：进制之间的转换&nbsp;&nbsp;进制有二进制、八进制、十进制、十六进制,此处我引入简书上的一篇文章，让大家更清晰的看明白进制间的转换 二进制、八进制、十进制、十六进制之间转换 –MPPC https://www.jianshu.com/p/555cd32e99cc 四、关键字在编译工具中会有红色提示的都属于关键字，也称之为保留字如下：","link":"/2020/01/15/java/Java%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"title":"Java中的数组","text":"Java基础知识系列课程-Java中的数组 @程序猿付显 &nbsp;&nbsp;数组也是一种变量,它可以存储一组固定长度、相同数据类型的数据 一、一维数组 声明 int[] array; –&gt;声明类型为int的数组 int array[]; –&gt;这种方式也是允许的 初始化 array = new int[5]; –&gt;初始化长度为5的数组 array = new int[]{0,1,2,3,4}; –&gt;直接填入5个数据完成初始化和赋值操作 array = {0,1,2,3,4}; –&gt;静态初始化,直接填入5个数据完成初始化和赋值操作 赋值 array[0] = 0; –&gt;使用下标从 [0] 开始进行赋值 使用 int i = array[0]; –&gt;此处也是使用下标从第一个[0]开始进行遍历的 数据在堆内存中的存储模型 123456789101112131415//1.声明数组int[] numbers = null;//2.初始化数组numbers = new int[5];//3.从下标0开始挨个赋值for(int i = 0;i&gt;numbers.length;i++){ numbers[i] = i;}//4.使用foreach遍历输出数组中的每一个元素for(int number:numbers){ System.out.println(number);} 二、二维数组&nbsp;&nbsp;二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组&nbsp;&nbsp;语法格式为: int[] [] arr = new int[length1][length2]; length1 为行数 length2 为列数 1234//静态初始化 int arr[][] = { {1,2,3}, {4,5,6}, {7,8,9} }; //动态初始化int n = 1; int[][] arr = new int[3][3]; for ( int i = 0; i &lt; arr.length; i++ ){ for ( int j = 0; j &lt; arr[i].length; j++ ){ arr[i][j] = n; n++; } } 以上代码执行完毕后再堆内存中的模型如图: 三、数组的使用&nbsp;&nbsp;以上数组演示的都是int类型的,我们还可以用其他任意的类型,包括但不限于八种基本数据类型、String、类等。 数组是内存中有序数据的集合，数组中的每个元素具有相同的数据类型。 数组必须先声明，对其初始化以后才能使用。对数组初始化有静态初始化和动态初始化两种方式。 通过下标来访问数组中的每个元素。 数组可以分为一维数组和多维数组。二维数组可以理解为一维数组的集合。","link":"/2020/02/02/java/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/"},{"title":"SqlServer2012的安装过程","text":"SQL基础系列课程-SqlServer2012的安装过程 @程序猿付显 同学们请注意,视频已经录制完毕,待上传到网易云课堂,组织统一时间观看并完成相关作业 下载软件在百度搜索或者其他地方很方便可以找到SqlServer2012的下载地址 百度网盘 提取码：99kq(此部分已是下载好的三个文件) 官网-SqlServer2012下载地址 点击下载会有提示,我们选择 X64 的三个即可 安装软件下载完之后,点击其中的exe文件解压缩会得到一个名字为”SQLFULL_x64_CHS”的文件夹,双击其中的”SETUP.EXE”,一路 NEXT即可… 安装SQL功能在功能选择中点击 “全选”再次一路NEXT即可… 在数据库引擎配置中选择混合模式并输入密码(我输入的是1,你可以随意,只要你记得就行),并且添加当前用户 在Analysis Service配置中添加当前用户 在分布式重播控制器中添加当前用户 随后关闭即可… 设置网络启动方式及网络配置设置网络启动方式在控制面板中 –&gt; 管理工具 –&gt; 服务 –&gt;SQL Server (MSSQLSERVER) –&gt; 右键属性–&gt;启动类型可选择自动、自动(延迟启动)、手动、禁止四种 网络配置SqlServer配置器 –&gt; SQL Server 网络配置 –&gt; MSSQLSERVER 的协议 –&gt; TCP/IP –&gt;启用,之后重启 SQL Server (MSSQLSERVER)服务即可","link":"/2020/02/04/SqlServer/SqlServer%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"title":"SqlServer的基础知识","text":"SQL基础系列课程-SqlServer的基础知识 @程序猿付显 同学们请注意,视频已经录制完毕,待上传到网易云课堂,组织统一时间观看并完成相关作业 数据库系统的简介&nbsp;&nbsp;我们的课程将向大家讲解如何使用一个管理软件以一种容易理解的、便于操作的方式来存储和获取数据,整套课程内容包括以下几项: 数据库的基本概念 使用SqlServer 2012管理工具管理数据库 创建数据库、表、约束 使用T-SQL 对数据进行增加、删除、修改和查询的操作 学会以上内容可以为我们在Java和.NET程序中进行数据库开发提供基础 数据库的相关基本概念数据&nbsp;&nbsp;人们对数据的定义多种多样，在各个行业或领域对数据的定义都有自己的看法，从我们的现实生活中来看，数据是对现实生活的理性描述，尽可能地从数量上反映现实世界&nbsp;&nbsp;例如:你可以现在掏出你的手机,打开微信运动看看今天走了几步,这个就是使用数据来对你今天的步行情况的一个描述,等等这样的例子非常多. 数据库&nbsp;&nbsp;库的概念大家应该会有很多现实的例子,比如车库:用来存放汽车的;我们的丹江口水库:用来存储水的;那么我们的数据库:就是用来存储数据的. 数据库管理系统&nbsp;&nbsp;管理数据库及数据的计算机软件,也就是我们将要学习的SqlServer2012管理工具 数据库和应用程序&nbsp;&nbsp;此图片描述了数据库和应用程序之间的一个关系,同时也拓展大家对于本课程的应用,让大家提前了解我们数据库到底跟应用程序之间是一个什么样的联系! 了解数据库技术的发展史 文件系统 使用磁盘文件夹存储数据 第一代数据库 出现了网状模型、层次模型的数据库 第二代数据库 关系型数据库和结构化查询语句 当前 关系数据库为主流,非关系型数据库大量使用 常见的关系型数据库Mysql数据库&nbsp;&nbsp;MySQL是最受欢迎的开源SQL数据库管理系统，它由 MySQL AB开发、发布和支持。MySQL AB是一家基于MySQL开发人员的商业公司，它是一家使用了一种成功的商业模式来结合开源价值和方法论的第二代开源公司。MySQL是MySQL AB的注册商标。&nbsp;&nbsp;MySQL是一个快速的、多线程、多用户和健壮的SQL数据库服务器。MySQL服务器支持关键任务、重负载生产系统的使用，也可以将它嵌入到一个大配置(mass- deployed)的软件中去。 Microsoft SQL Server数据库&nbsp;&nbsp;SQL Server是由微软开发的数据库管理系统，是Web上最流行的用于存储数据的数据库，它已广泛用于电子商务、银行、保险、电力等与数据库有关的行业。&nbsp;&nbsp;目前最新版本是SQL Server 2005，它只能在Windows上运行，操作系统的系统稳定性对数据库十分重要。并行实施和共存模型并不成熟，很难处理日益增多的用户数和数据卷，伸缩性有限。&nbsp;&nbsp;SQL Server 提供了众多的Web和电子商务功能，如对XML和Internet标准的丰富支持，通过Web对数据进行轻松安全的访问，具有强大的、灵活的、基于Web的和安全的应用程序管理等。而且，由于其易操作性及其友好的操作界面，深受广大用户的喜爱。 Oracle数据库&nbsp;&nbsp;Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。它是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是目前世界上流行的关系数据库管理系统，系统可移植性好、使用方便、功能强，适用于各类大、中、小、微机环境。它是一种高效率、可靠性好的 适应高吞吐量的数据库解决方案。 Postgresql数据库&nbsp;&nbsp;PostgreSQL是以加州大学伯克利分校计算机系开发的 POSTGRES，现在已经更名为PostgreSQL，版本 4.2为基础的对象关系型数据库管理系统（ORDBMS）。PostgreSQL支持大部分 SQL标准并且提供了许多其他现代特性：复杂查询、外键、触发器、视图、事务完整性、MVCC。同样，PostgreSQL 可以用许多方法扩展，比如，通过增加新的数据类型、函数、操作符、聚集函数、索引。免费使用、修改、和分发 PostgreSQL，不管是私用、商用、还是学术研究使用。&nbsp;&nbsp;PostgreSQL 是一个免费的对象-关系数据库服务器(数据库管理系统)，它在灵活的 BSD-风格许可证下发行。它提供了相对其他开放源代码数据库系统(比如 MySQL 和 Firebird)，和专有系统(比如 Oracle、Sybase、IBM 的 DB2 和 Microsoft SQL Server)之外的另一种选择。 Sybase数据库&nbsp;&nbsp;美国Sybase公司研制的一种关系型数据库系统，是一种典型的UNIX或WindowsNT平台上客户机/服务器环境下的大型数据库系统。&nbsp;&nbsp;Sybase提供了一套应用程序编程接口和库，可以与非Sybase数据源及服务器集成，允许在多个数据库之间复制数据，适于创建多层应用。系统具有完备的触发器、存储过程、规则以及完整性定义，支持优化查询，具有较好的数据安全性。&nbsp;&nbsp;Sybase通常与SybaseSQLAnywhere用于客户机/服务器环境，前者作为服务器数据库，后者为客户机数据库，采用该公司研制的PowerBuilder为开发工具，在我国大中型系统中具有广泛的应用。 DB2数据库&nbsp;&nbsp;DB2主要应用于大型应用系统，具有较好的可伸缩性，可支持从大型机到单用户环境，应用于所有常见的服务器操作系统平台下。&nbsp;&nbsp;DB2提供了高层次的数据利用性、完整性、安全性、可恢复性，以及小规模到大规模应用程序的执行能力，具有与平台无关的基本功能和SQL命令。DB2采用了数据分级技术，能够使大型机数据很方便地下载到LAN数据库服务器，使得客户机/服务器用户和基于LAN的应用程序可以访问大型机数据，并使数据库本地化及远程连接透明化。&nbsp;&nbsp;DB2以拥有一个非常完备的查询优化器而著称，其外部连接改善了查询性能，并支持多任务并行查询。 DB2具有很好的网络支持能力，每个子系统可以连接十几万个分布式用户，可同时激活上千个活动线程，对大型分布式应用系统尤为适用。 Access数据库&nbsp;&nbsp;Microsoft Office Access是由微软发布的关系数据库管理系统。它结合了 MicrosoftJet Database Engine 和 图形用户界面两项特点，是 Microsoft Office 的系统程序之一。&nbsp;&nbsp;Microsoft Office Access是微软把数据库引擎的图形用户界面和软件开发工具结合在一起的一个数据库管理系统。它是微软OFFICE的一个成员, 在包括专业版和更高版本的office版本里面被单独出售。&nbsp;&nbsp;MS ACCESS以它自己的格式将数据存储在基于Access Jet的数据库引擎里。它还可以直接导入或者链接数据(这些数据存储在其他应用程序和数据库)。&nbsp;&nbsp;软件开发人员和数据架构师可以使用Microsoft Access开发应用软件,“高级用户”可以使用它来构建软件应用程序。和其他办公应用程序一样，ACCESS支持Visual Basic宏语言,它是一个面向对象的编程语言,可以引用各种对象，包括DAO(数据访问对象),ActiveX数据对象,以及许多其他的ActiveX组件。可视对象用于显示表和报表，他们的方法和属性是在VBA编程环境下，VBA代码模块可以声明和调用Windows操作系统函数。 常见的非关系型数据库Mongodb数据库&nbsp;&nbsp;MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。&nbsp;&nbsp;MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。 Redis数据库&nbsp;&nbsp;Redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。&nbsp;&nbsp;Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。 Hbase数据库&nbsp;&nbsp;HBase是一个分布式的、面向列的开源数据库，该技术来源于 Fay Chang 所撰写的Google论文“Bigtable：一个结构化数据的分布式存储系统”。就像Bigtable利用了Google文件系统（File System）所提供的分布式数据存储一样，HBase在Hadoop之上提供了类似于Bigtable的能力。&nbsp;&nbsp;HBase是Apache的Hadoop项目的子项目。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。另一个不同的是HBase基于列的而不是基于行的模式。 Memcaced数据库&nbsp;&nbsp;Memcaced是一个开源的、高性能的、具有分布式内存对象的缓存系统。通过它可以减轻数据库负载，加速动态的web应用，最初版本由LiveJoumal 的Brad Fitzpatrick在2003年开发完成。目前全球有非常多的用户都在使用它来架构主机的大负载网站或提升主机的高访问网站的响应速度。注意：Memcache 是这个项目的名称，而Memcached是服务端的主程序文件名。&nbsp;&nbsp;缓存一般用来保存一些进程被存取的对象或数据，通过缓存来存取对象或数据要比在磁盘上存取块很多，前者是内存，后者是磁盘、Memcached是一种纯内存缓存系统，把经常存取的对象或数据缓存在memcached的内存中，这些被缓存的数据被程序通过API的方式被读取，memcached里面的数据就像一张巨大的hash表，数据以key-value对的方式存在。Memcached通过缓存经常被存取的对象或数据，从而减轻频繁读取数据库的压力，提高网站的响应速度，构建出快速更快的可扩展的Web应用。 以上详细介绍可参考 常见的主流数据库（DBMS）-柚子君. 上一篇中已经给大家讲解了如何安装SqlServer2012以及简单的使用,视频请按照 网易云课堂 相关提示观看 下一篇准备给大家讲讲SqlServer2012管理工具的详细使用及相关约束的建立 彩蛋–&gt;准备近期开设一个专栏,发布往届小哥哥小姐姐的个人总结或者博客,当然欢迎大家积极投稿(md文档)","link":"/2020/02/09/SqlServer/SqlServer%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"title":"SqlServer中企业管理器的使用","text":"SQL基础系列课程-SqlServer中企业管理器的使用 @程序猿付显 同学们请注意,视频已经录制完毕,已上传到网易云课堂,组织统一时间观看并完成相关作业 使用企业管理器管理数据库文件及文件组&nbsp;&nbsp;安装好 SQL Server 2012 数据库服务器，然后需要将一些数据存放到数据库中， 那么我们应该怎么做呢？ &nbsp;&nbsp;就是在 SQL Server 2012 数据库服务器上创建一个数据库用来存放数据。这个新数据库以文件形式存放在计算机的硬盘中。 &nbsp;&nbsp;在 SQL Server中一个数据库至少包含两种文件——数据库文件和事务日志文件。一个数据库至少应包含一个数据库文件和一个事务日志文件。 1．数据库文件(Database File)&nbsp;&nbsp;数据库文件是存放数据库数据和数据库对象的文件，一个数据库可以有一个或多个数据库文件，一个数据库文件只属于一个数据库；当有多个数据库文件时，有一个文件被定义为主数据库文件(Primary Database File)，扩展名为.mdf，它用来存储数据库的启动信息和部分或全部数据；一个数据库只能有一个主数据库文件，其他数据库文件被称为次数据库文件(Secondary Database File)，扩展名为.ndf，用来存储 主文件没有存储的其他数据。&nbsp;&nbsp;采用多个数据库文件来存储数据的优点体现在如下两个方面: 数据库文件可以不断扩充而不受操作系统文件大小的限制 可以将数据库文件存储在不同的硬盘中，这样可以同时对几个硬盘做数据 存取，提高数据处理效率 2. 事务日志文件(Transaction Log File)&nbsp;&nbsp;事务日志文件是用来记录数据库更新情况的文件，扩展名为.ldf，对数据库进行的操作都会记录在此文件中 3. 文件组(File Group)&nbsp;&nbsp;文件组是将多个数据库文件集合起来形成的一个整体，每个文件组有一个组名。 与数据库文件一样，文件组也分为主文件组(Primary File Group)和次文件组 (Secondary File Group)。主数据库文件必须放在主文件组中，次数据库文件可以放 在次文件组 创建数据库&nbsp;&nbsp;在企业管理器中创建数据库 1、 在企业管理器的“数据库”的快捷菜单中右击 “新建数据库” 2、 按照需求设定各种属性的值，包括文件类型、文件组、初始大小、自动增长以及存储路径。 在 SQL Server 2012中，自动增长可以按照百分比和 MB两种方式增长。 3、点击确定就完成了创建数据库。 配置数据库属性&nbsp;&nbsp;在创建的数据库上右键，选中“属性”，然后选择“选项” ANSI Null 默认值。允许在数据库表的列中输入 Null 值。 只读。数据库只读，只能查看不能修改。 自动关闭。当数据库中无用户时，自动关闭此数据库并将释放所占用的资 源；对那些经常被使用的数据库，不要使用此选项，否则会额外增加开关 数据库的次数而带来负担。 自动收缩。定期对数据库进行检查，当数据库文件或日志文件的未使用空 间超过其大小的 25%时，系统将会自动收缩文件，使其未用空间等于 25%， 当文件大小没有超过其建立时的初始大小时不会缩减；文件缩减后也必须 大于或等于其初始大小。 删除数据库&nbsp;&nbsp;在 SQL Server Management Studio 中可以很简单的完成：在需要删除的数据库上右击，然 后选择“删除”选项，就会弹出删除的对话框，单击“确定”按钮即可 分离、附加数据库 通过分离数据库会将数据库在本机上分离，通过分离会形成多个文件，以便使用 通过附加数据库将我们分离后的文件附加进数据库管理工具中。 使用企业管理器管理表数据类型 创建表 使用企业管理器管理约束数据完整性&nbsp;&nbsp;数据完整性（Data Integrity）是指数据的精确性（Accuracy） 和可靠性（Reliability）它是应防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。 1、实体完整性 实体完整性指表中行的完整性。 2、域完整性 域完整性能够保证表中的数据是合法的数据。 3、引用完整性（参照完整性） 引用完整性是指某列的值必须与其他列的值匹配。 创建约束主键约束 检查约束 外键约束 默认约束 标识列 列值是否为空 唯一约束 导出SQL文件 本章给大家讲解了工具的简单使用我们的重点在下一章 下一章使用查询分析器来管理数据库、表、约束等 等大家把下一章学会你们会回过头来认真学习本章内容的，不要问为什么！","link":"/2020/02/12/SqlServer/SqlServer%E4%B8%AD%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"Spring 依赖注入的三种形式","text":"小哥哥小姐姐【转载】-Spring 依赖注入的三种形式 @孟某人 Spring 依赖注入的三种形式第一种：构造函数注入 所使用标签:constructor-arg 标签出现的位置：bean标签的内部 标签中的属性: type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型 index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始 name：用于指定给构造函数中指定名称的参数赋值 —————-常用的以上三个属性用于指定给构造函数中哪个参数赋值，以下两个用于赋值 value：用于提供基本类型和String类型的数据 ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象 优势：在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。 弊端：改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。 1234567&lt;bean id=\"accountService\" class=\"com.msg.service.AccountServiceImpl\"&gt; &lt;constructor-arg name=\"name\" value=\"泰斯特\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=\"age\" value=\"18\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg name=\"birthday\" ref=\"now\"&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; &lt;!-- 配置一个日期对象以供birthday属性引用 --&gt; &lt;bean id=\"now\" class=\"java.util.Date\"&gt;&lt;/bean&gt; 第二种：set方法注入(相比于构造函数注入，set方式注入更为常用) 所使用标签:==property== 标签出现的位置：bean标签的内部 标签中的属性与使用方法: name：用于指定注入时所调用的set方法名称 value：用于提供基本类型和String类型的数据 ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象1234567&lt;bean id=\"accountService2\" class=\"com.msg.impl.AccountServiceImpl2\"&gt; &lt;property name=\"name\" value=\"TEST\" &gt;&lt;/property&gt; &lt;property name=\"age\" value=\"21\"&gt;&lt;/property&gt; &lt;property name=\"birthday\" ref=\"now\"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 配置一个日期对象以供birthday属性引用 --&gt; &lt;bean id=\"now\" class=\"java.util.Date\"&gt;&lt;/bean&gt; 在==property==标签中注入array(数组) Map List Set属性时都有相应的标签与之对应使用方法如下： (结构相同，标签可以互换就比如为数组注入可以使用list或set标签注入) 123456789101112131415161718192021222324252627282930313233&lt;bean id=\"accountService3\" class=\"com.msg.impl.AccountServiceImpl3\"&gt;&lt;!--数组注入--&gt; &lt;property name=\"myarray\"&gt; &lt;array&gt; &lt;value&gt;AAA&lt;/value&gt; &lt;value&gt;BBB&lt;/value&gt; &lt;value&gt;CCC&lt;/value&gt; &lt;/array&gt; &lt;/property&gt;&lt;!--list注入--&gt; &lt;property name=\"myList\"&gt; &lt;list&gt; &lt;value&gt;AAA&lt;/value&gt; &lt;value&gt;BBB&lt;/value&gt; &lt;value&gt;CCC&lt;/value&gt; &lt;/list&gt; &lt;/property&gt;&lt;!--set注入--&gt; &lt;property name=\"mySet\"&gt; &lt;set&gt; &lt;value&gt;AAA&lt;/value&gt; &lt;value&gt;BBB&lt;/value&gt; &lt;value&gt;CCC&lt;/value&gt; &lt;/set&gt; &lt;/property&gt;&lt;!--set注入--&gt; &lt;property name=\"myMap\"&gt; &lt;map&gt; &lt;entry key=\"testC\"&gt;ccc&lt;/prop&gt; &lt;entry key=\"testD\"&gt;ddd&lt;/prop&gt; &lt;/map&gt; &lt;/property&gt; &lt;/bean&gt; 优势： 创建对象时没有明确的限制，可以直接使用默认构造函数 弊端： 如果有某个成员必须有值，则获取对象是有可能set方法没有执行。 第三种：注解注入 首先介绍一下bean的常用属性配置： 1&lt;bean id=\"\" class=\"\" scope=\"\" init-method=\"\" destroy-method=\"\"&gt;&lt;/bean&gt; id：id的值是我们通过ApplicationContext容器获取对象时的依据(唯一的) class：值为 类的全限定地址 init-method：值为类初始化所执行的方法名 destroy-method：值为类的销毁时所执行的方法 scope:用于指定bean的作用范围取值： 常用的就是单例的和多例的 singleton：单例的（默认值） prototype：多例的 request：作用于web应用的请求范围 session：作用于web应用的会话范围 global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session 下面我们来介绍注解： 注解的作用： 和在XML配置文件中编写一个标签实现的功能是一样的只不过配置的方式不同 用于把当前类对象存入spring容器中注解 @Component: - 作用：将当前标注的类对象存入Spring容器中 属性： value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写 。 @Component衍生的注解：（以下三个注解他们的作用和属性与Component是一模一样，他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰） @Controller：一般用在表现层 @Service：一般用在业务层 @Repository：一般用在持久层 用于注入数据的注解 作用：他们的作用就和在xml配置文件中的bean标签中写一个标签的作用是一样的 @Autowired注解: 作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功， 如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。如果Ioc容器中有多个类型匹配时则需要@Qualifier注解配合使用 出现位置：可以是变量上，也可以是方法上 细节：在使用注解注入时，set方法就不是必须的了。 @Qualifier注解: 作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用要与@Autowired注解的配合下使用。但是在给方法参数注入时可以 属性：value：用于指定注入bean的id。 @Resource注解(推荐使用) 作用：直接按照bean的id注入。它可以独立使用 属性：name：用于指定bean的id。 @Value注解 作用：用于注入基本类型和String类型的数据 属性：value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）SpEL的写法：${表达式} 另外，集合类型的注入只能通过XML来实现。 用于改变作用范围的注解 @Scope注解 作用：他们的作用就和在bean标签中使用scope属性实现的功能是一样的指定bean的作用范围 属性：value：指定范围的取值。常用取值：singleton(默认单例) prototype(多例) 和生命周期相关的注解 @PreDestroy注解 作用：用于指定销毁方法(和在bean标签中destroy-methode的作用是一样的) @PostConstruct注解 作用：用于指定初始化方法(和在bean标签中init-method的作用是一样的)联系我","link":"/2020/02/13/%E5%B0%8F%E5%93%A5%E5%93%A5%E5%B0%8F%E5%A7%90%E5%A7%90%E7%B3%BB%E5%88%97/Spring%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E5%BD%A2%E5%BC%8F/"}],"tags":[],"categories":[{"name":"开篇","slug":"开篇","link":"/categories/%E5%BC%80%E7%AF%87/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"SqlServer","slug":"SqlServer","link":"/categories/SqlServer/"},{"name":"前人经验","slug":"前人经验","link":"/categories/%E5%89%8D%E4%BA%BA%E7%BB%8F%E9%AA%8C/"}]}